object {} -> have two things -> {key : "value"} 
and obj in array is a element from a lot of elements in array like data base in mongoose 



"watch": "nodemon --ext *" //to play cmd(npm run watch) to display auto refresh for changes// 


// app.get('/user/search.html', (req, res) => {
//   res.render("user/edit")
// })


app.use(express.urlencoded({ extended: true })); -> خلّي Express يقرأ بيانات النموذج (form) ويحولها إلى كائن داخل req.body، حتى لو كانت البيانات متداخلة.


*Data base*
const mongoose = require('mongoose'); //to use mongoose
const Schema = mongoose.Schema; // to define the schema
 
// define the Schema (the structure of the article)
const articleSchema = new Schema({
  username: String
}); // define the structure of the document (the article) to be saved in the collection 

const Mydata = mongoose.model("Mydata", articleSchema); // create the model (the collection) to be used

module.exports = Mydata; // export the model to be used in other files
**


ejs tags -> <%= %> not <% %>

<% if (typeof successMessage !== 'undefined' && successMessage) { %>
  <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
    <%= successMessage %>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
<% } %> // this for alert message above table


// app.get('/user/:id', (req, res) => {

//   Customer.findById(req.params.id)
//   .then((result) => { 
//     res.render("user/view", { user, currentPage: 'view' })
//   }).catch((err) => { 
//     console.log(err)
//   })

// })


app.post('/user/add.html', (req, res) => {
  console.log(req.body) // to see the form data in the console
  const customer = new Customer(req.body); // create a new customer document from the form data
  customer.save() // save the document to the database
  .then(( ) => {
    res.redirect('/user/add.html')
  }) 
  .catch((err) => { 
    console.log(err)
  })
})

<td><%= customer.updatedAt ? customer.updatedAt.toLocaleDateString() : '' %></td>
//
<td><%= moment(customer.updatedAt).fromNow(); %></td>
//
<td><%= moment(customer.updatedAt).format("MM Do YY") %></td>

// delete
app.post('/user/delete/:id', async (req, res) => {
  try {
    await Customer.findByIdAndDelete(req.params.id);
    res.redirect('/');
  } catch (err) {
    res.status(500).send("Error deleting user");
  }
});

action="/user/delete/<%= customer._id %>"

app.get('/edit/:id', async (req, res) => {
  try {
    const user = await Customer.findById(req.params.id);
    res.render("user/edit", {user, currentPage: 'edit', pageTitle: 'Edit Page'});
  } catch (err) {
    console.log(err);
    res.status(500).send("User not found");
  }
});

app.get('/view/:id', async (req, res) => {
  try {
    const user = await Customer.findById(req.params.id); // fetch user by ID
    res.render("user/view", { user, currentPage: 'view', pageTitle: 'View Page', moment: moment }); // render view with user data
  } catch (err) {
    console.log(err);
    res.status(500).send("User not found");
  }
});